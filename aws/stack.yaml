AWSTemplateFormatVersion: '2010-09-09'

Description: Node app on EC2 with load balancing

Parameters: 
  InstanceKeyName: 
    Type: AWS::EC2::KeyPair::KeyName
    Description: Your key pair to access the EC2 instance.
    Default: julianoalberto

  InstanceImageId:
    Type: AWS::EC2::Image::Id
    Description: ImageId for EC2 instance.
    Default: ami-02bcbb802e03574ba

  InstanceType:
    Type: String
    Description: Type of EC2 instance.
    Default: t2.micro

  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Availability zone for EC2 instance.
    Default: us-east-2b

  VPC: 
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for target group.
    Default: vpc-487b7720

  LoadBalancerSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets for load balancer.
    Default: 'subnet-5222163a,subnet-855a38ff'

Resources:
    InstanceSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: 'Instance security'
            SecurityGroupIngress:
                -
                  CidrIp: '0.0.0.0/0'
                  Description: 'SSH access'
                  FromPort: '22'
                  ToPort: '22'
                  IpProtocol: 'tcp'
                -
                  SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
                  IpProtocol: -1
                  FromPort: 3000
                  ToPort: 3000
                
    LoadBalancerSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: 'HTPP access'
            SecurityGroupIngress:
                -
                    CidrIp: '0.0.0.0/0'
                    Description: 'Allowed from anywhere'
                    FromPort: '80'
                    ToPort: '80'
                    IpProtocol: 'tcp'   
                                  
    EC2Instance1:
        Type: 'AWS::EC2::Instance'
        Properties:
            AvailabilityZone: !Ref AvailabilityZone
            ImageId: !Ref InstanceImageId
            InstanceType: !Ref InstanceType
            KeyName: !Ref InstanceKeyName
            SecurityGroupIds:
                - !GetAtt InstanceSecurityGroup.GroupId
            UserData:
              Fn::Base64:
                Fn::Join:
                  - ""
                  -
                    - "#!/bin/bash -ex"
                    - "\n"
                    - "sudo yum update -y"
                    - "\n"
                    - "sudo amazon-linux-extras install -y epel"
                    - "\n"
                    - "sudo yum install -y nodejs"
                    - "\n"
                    - "sudo yum install -y git"
                    - "\n"
                    - "cd ~"
                    - "\n"
                    - "git clone https://github.com/julianoalberto/hello-world.git"
                    - "\n"
                    - "cd hello-world"
                    - "\n"
                    - "npm install"
                    - "\n"
                    - "node . &"
                    - "\n"

    PlanetTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: PlanetTargetGroup
        VpcId: !Ref VPC
        Port: 80
        Protocol: HTTP
        Targets:
          - Id:
              Ref: EC2Instance1
            Port: 3000

    PlanetLoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Name: PlanetLoadBalancer
          Subnets: !Ref LoadBalancerSubnets
          SecurityGroups:
            - !GetAtt LoadBalancerSecurityGroup.GroupId

    LoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: !Ref PlanetLoadBalancer
        Port: 80
        Protocol: HTTP
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref PlanetTargetGroup

Outputs:
  LoadBalancerURL:
    Description: URL used to access the application
    Value: !GetAtt PlanetLoadBalancer.DNSName